/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { useResource } from "react-three-fiber";
import { useLayoutEffect } from "react";
import { RepeatWrapping } from "three";
import { useState } from "react";
import { useEffect } from "react";

const colors = [
  ["#eee", "#eee", "#eee", "#eee", "#eee"],
  ["pink", "pink", "pink", "pink", "pink"],
  ["#00aaee", "#00aaee", "#00aaee", "#00aaee", "#00aaee"],
  ["#ffa", "#55aa33", "#55aa33", "#ffa", "#ffa"],
  ["#00aaee", "pink", "#00aaee", "pink", "#00aaee"],
];

function Light(props) {
  const ref = useResource();
  return (
    <>
      <mesh ref={ref} position={[0, 1, -10000]} />
      <pointLight
        intensity={5}
        distance={1.5}
        {...props}
        position={[
          props.position[0] - 2,
          props.position[1] + 1,
          props.position[2] - 10,
        ]}
      />
    </>
  );
}

export default function Model(props) {
  const group = useRef();
  const structureMat = useResource();
  const screenMat = useResource();
  const wallMat = useResource();
  const [marcello, setMarcello] = useState(0);
  const { nodes, materials } = useGLTF("/p2.glb");

  const textures = useTexture([
    "/Concrete008_4K_Displacement.jpg",
    "/Concrete008_4K_Normal.jpg",
    "/Concrete008_4K_Color.jpg",
  ]);
  const screenTextures = useTexture([
    "/Metal012_2K_Roughness.jpg",
    "/Metal012_2K_Normal.jpg",
    "/Metal012_2K_Displacement.jpg",
    "/Metal012_2K_Metalness.jpg",
  ]);
  const screenMaps = useTexture([
    "/1.jpg",
    "/2.jpg",
    "/3.png",
    "/4.png",
    "/5.png",
  ]);
  const [height, normal, base] = textures;
  const [
    screenRoughness,
    screenNormal,
    screenHeight,
    screenMetalness,
  ] = screenTextures;
  useLayoutEffect(
    () =>
      textures.forEach(
        (texture) => void (texture.wrapT = texture.wrapS = RepeatWrapping)
      ),
    [textures]
  );

  useEffect(() => {
    const id = setInterval(
      () => setMarcello((s) => (s + 1) % colors.length),
      5000
    );
    return () => clearInterval(id);
  }, [setMarcello]);

  return (
    <>
      <meshStandardMaterial
        ref={structureMat}
        color="black"
        roughness={0.9}
        metalness={0.7}
        envMapIntensity={3}
      />
      <primitive
        ref={screenMat}
        object={materials.screen}
        attach="material"
        envMapIntensity={4}
        map={screenMaps[marcello]}
        roughnessMap={screenRoughness}
        normalMap={screenNormal}
        normalScale={[0.1, 0.1]}
        displacementMap={screenHeight}
        metalnessMap={screenMetalness}
      />
      <primitive
        ref={wallMat}
        object={materials.wall}
        attach="material"
        envMapIntensity={0.5}
        map={base}
        normalMap={normal}
        normalScale={[2, 2]}
        displacementMap={height}
      />
      <group ref={group} {...props} dispose={null}>
        <mesh
          geometry={nodes.Plane.geometry}
          position={[-1, 0, -2]}
          material={wallMat.current}
        />
        <group
          position={[0.47, 0.58, 0.7]}
          rotation={[0, 0.38, 0]}
          scale={[-0.13, -0.65, -0.03]}
        >
          <mesh
            geometry={nodes.Cube001.geometry}
            material={structureMat.current}
          />
          <mesh
            geometry={nodes.Cube001_1.geometry}
            material={screenMat.current}
          />
          <Light color={colors[marcello][0]} position={[2, 0, 0]} />
          <Light color={colors[marcello][1]} position={[-12, 0, -60]} />
          <Light color={colors[marcello][2]} position={[-25, 0, -80]} />
        </group>
        <group
          position={[2.65, 0.58, 0.01]}
          rotation={[0, 0.38, 0]}
          scale={[-0.13, -0.65, -0.03]}
        >
          <mesh
            geometry={nodes.Cube003.geometry}
            material={screenMat.current}
          />
          <mesh
            geometry={nodes.Cube003_1.geometry}
            material={structureMat.current}
          />
          <Light color={colors[marcello][3]} position={[1, 0, 0]} />
          <Light color={colors[marcello][4]} position={[-12, 0, -40]} />
        </group>
      </group>
    </>
  );
}

useGLTF.preload("/p.glb");
